# 1 "kawalexer.mll"
 

  open Lexing
  open Kawaparser

  exception Error of string

  let keyword_or_ident =
  let h = Hashtbl.create 17 in
  List.iter (fun (s, k) -> Hashtbl.add h s k)
    [ "print",    PRINT;
      "main",     MAIN;
      "var",      VAR;
      "attribute",ATTRIBUTE;
      "method",   METHOD;
      "class",    CLASS;
      "new",      NEW;
      "this",     THIS;
      "if",       IF;
      "else",     ELSE;
      "while",    WHILE;
      "return",   RETURN;
      "int",      INT_TYPE;
      "bool",     BOOL_TYPE;
      "void",     VOID_TYPE;
      "true",     TRUE;
      "false",    FALSE;
      "super",    SUPER;
      "extends",  EXTENDS;
      "final",    FINAL;
      "public",   PUBLIC;
      "private",  PRIVATE;
      "protected",PROTECTED;
      "instanceof",INSTANCEOF;
    ] ;
  fun s ->
    try  Hashtbl.find h s
    with Not_found -> IDENT(s)
        

# 43 "kawalexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\227\255\228\255\229\255\230\255\002\000\001\000\002\000\
    \003\000\004\000\239\255\241\255\243\255\005\000\245\255\246\255\
    \247\255\248\255\249\255\079\000\019\000\029\000\045\000\002\000\
    \255\255\252\255\002\000\253\255\238\255\237\255\235\255\233\255\
    \232\255\231\255\016\000\253\255\254\255\041\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\028\000\028\000\021\000\
    \019\000\028\000\255\255\255\255\255\255\011\000\255\255\255\255\
    \255\255\255\255\255\255\005\000\004\000\013\000\015\000\001\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\001\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\036\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\024\000\023\000\027\000\023\000\000\000\023\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\009\000\023\000\000\000\000\000\010\000\006\000\032\000\
    \017\000\016\000\011\000\012\000\003\000\021\000\004\000\022\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\037\000\018\000\008\000\013\000\007\000\031\000\
    \030\000\029\000\028\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\025\000\
    \038\000\000\000\000\000\000\000\026\000\000\000\000\000\019\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\015\000\005\000\014\000\033\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\019\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\023\000\026\000\000\000\255\255\023\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\023\000\255\255\255\255\000\000\000\000\006\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\034\000\000\000\000\000\000\000\000\000\007\000\
    \008\000\009\000\013\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\022\000\
    \037\000\255\255\255\255\255\255\022\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\005\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\255\255\255\255\255\255\255\255\019\000\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\026\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \034\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 48 "kawalexer.mll"
                      ( new_line lexbuf; token lexbuf )
# 172 "kawalexer.ml"

  | 1 ->
# 49 "kawalexer.mll"
                      ( token lexbuf )
# 177 "kawalexer.ml"

  | 2 ->
# 51 "kawalexer.mll"
                         ( new_line lexbuf; token lexbuf )
# 182 "kawalexer.ml"

  | 3 ->
# 52 "kawalexer.mll"
                         ( comment lexbuf; token lexbuf )
# 187 "kawalexer.ml"

  | 4 ->
let
# 54 "kawalexer.mll"
              n
# 193 "kawalexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 54 "kawalexer.mll"
                 ( INT(int_of_string n) )
# 197 "kawalexer.ml"

  | 5 ->
let
# 55 "kawalexer.mll"
             id
# 203 "kawalexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 55 "kawalexer.mll"
                 ( keyword_or_ident id )
# 207 "kawalexer.ml"

  | 6 ->
# 57 "kawalexer.mll"
         ( SEMI )
# 212 "kawalexer.ml"

  | 7 ->
# 58 "kawalexer.mll"
         ( LPAR )
# 217 "kawalexer.ml"

  | 8 ->
# 59 "kawalexer.mll"
         ( RPAR )
# 222 "kawalexer.ml"

  | 9 ->
# 60 "kawalexer.mll"
         ( BEGIN )
# 227 "kawalexer.ml"

  | 10 ->
# 61 "kawalexer.mll"
         ( END )
# 232 "kawalexer.ml"

  | 11 ->
# 62 "kawalexer.mll"
         ( ASSIGN )
# 237 "kawalexer.ml"

  | 12 ->
# 63 "kawalexer.mll"
         ( ADD )
# 242 "kawalexer.ml"

  | 13 ->
# 64 "kawalexer.mll"
         ( SUB )
# 247 "kawalexer.ml"

  | 14 ->
# 65 "kawalexer.mll"
         ( MUL )
# 252 "kawalexer.ml"

  | 15 ->
# 66 "kawalexer.mll"
         ( DIV )
# 257 "kawalexer.ml"

  | 16 ->
# 67 "kawalexer.mll"
         ( REM )
# 262 "kawalexer.ml"

  | 17 ->
# 68 "kawalexer.mll"
         ( EQ )
# 267 "kawalexer.ml"

  | 18 ->
# 69 "kawalexer.mll"
         ( NEQ )
# 272 "kawalexer.ml"

  | 19 ->
# 70 "kawalexer.mll"
         ( LT )
# 277 "kawalexer.ml"

  | 20 ->
# 71 "kawalexer.mll"
         ( LE )
# 282 "kawalexer.ml"

  | 21 ->
# 72 "kawalexer.mll"
         ( GT )
# 287 "kawalexer.ml"

  | 22 ->
# 73 "kawalexer.mll"
         ( GE )
# 292 "kawalexer.ml"

  | 23 ->
# 74 "kawalexer.mll"
         ( AND )
# 297 "kawalexer.ml"

  | 24 ->
# 75 "kawalexer.mll"
         ( OR )
# 302 "kawalexer.ml"

  | 25 ->
# 76 "kawalexer.mll"
         ( DOT )
# 307 "kawalexer.ml"

  | 26 ->
# 77 "kawalexer.mll"
         ( COMMA )
# 312 "kawalexer.ml"

  | 27 ->
# 78 "kawalexer.mll"
         ( EOF )
# 317 "kawalexer.ml"

  | 28 ->
# 79 "kawalexer.mll"
         ( raise (Error ("unknown character : " ^ lexeme lexbuf)) )
# 322 "kawalexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 34
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 83 "kawalexer.mll"
         ( () )
# 334 "kawalexer.ml"

  | 1 ->
# 84 "kawalexer.mll"
         ( comment lexbuf )
# 339 "kawalexer.ml"

  | 2 ->
# 85 "kawalexer.mll"
         ( raise (Error "unterminated comment") )
# 344 "kawalexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

